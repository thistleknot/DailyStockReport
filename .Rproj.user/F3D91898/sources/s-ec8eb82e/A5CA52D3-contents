#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
#9 quarters is 5479/8897 61% (60%)
#nasdaqTraded <- as.character(head(read.csv("nasdaqtraded.txt",sep="|")$Symbol,-2))
#mfunds <- as.character(head(read.csv("nasdaqtraded.txt",sep="|")$Symbol,-2))
#if(download)
{
  
  #wget("ftp://ftp.nasdaqtrader.com/SymbolDirectory/nasdaqtraded.txt")
  #wget("ftp://ftp.nasdaqtrader.com/SymbolDirectory/mfundslist.txt")
}


# Define UI for application that draws a histogram
ui <- fluidPage(
   
   # Application title
   titlePanel("Old Faithful Geyser Data"),
   
   actionButton("DownloadSymbols", "1. Wget Symbols"),
   actionButton("DownloadStocks", "2. Download Stocks"),
   
   # Sidebar with a slider input for number of bins 
   sidebarLayout(
      sidebarPanel(
         sliderInput("symbols",
                     "Number of symbols:",
                     min = 5,
                     max = 50,
                     value = 20),
         sliderInput("quarters",
                     "Number of quarters:",
                     min = 3,
                     max = 20,
                     value = 9)
      ),
      
      # Show a plot of the generated distribution
      mainPanel(
        tabsetPanel(
          tabPanel("Main", 
                   uiOutput("plots")
                   ),
         tabPanel("Second")
      ))
   )
)

# Define server logic required to draw a histogram
server <- function(input, output, session) {
  
  output$plots <- renderUI({
    plot_output_list <- lapply(1:input$symbols, function(i) {
      plotname <- paste("plot", i, sep="")
      plotOutput(plotname, height = 280, width = 250)
    })
    
    # Convert the list to a tagList - this is necessary for the list of items
    # to display properly.
    do.call(tagList, plot_output_list)
  })
  
  observeEvent(input$DownloadSymbols, {
    
    for (i in names(symbolSet)) {
      # Need local so that each item gets its own number. Without it, the value
      # of i in the renderPlot() will be the same across all instances, because
      # of when the expression is evaluated.
      local({
        my_i <- i
        plotname <- paste("plot", my_i, sep="")
        
        #output[[plotname]] <- renderPlot({
          #chart.CumReturns(as.xts(symbolSet[i]), legend.loc = 'topleft')
        output[[plotname]] <- renderPlot({
          plot(1:my_i, 1:my_i,
               xlim = c(1, max_plots),
               ylim = c(1, max_plots),
               main = paste("1:", my_i, ".  n is ", input$n, sep = "")
          )
        })
      })
    }
    
    
    })
  
}

# Run the application 
shinyApp(ui = ui, server = server)

