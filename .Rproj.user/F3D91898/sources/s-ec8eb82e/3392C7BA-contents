#called from stock_analysis.R

#constants, also referenced by stock_analysis.R
source("lists.R")

if (!require(HelpersMG)) install.packages('HelpersMG')
  #required for BatchGetSymbols
  #requires apt-get install libxml2-dev
  if (!require(rvest)) install.packages('rvest')
  if (!require(XML)) install.packages('XML')
if (!require(BatchGetSymbols)) install.packages('BatchGetSymbols')
if (!require(future)) install.packages('future')
if (!require(anytime)) install.packages('anytime')
#if (!require(RCurl)) install.packages('RCurl')
if (!require(data.table)) install.packages('data.table')
if (!require(quantmod)) install.packages('quantmod')

betaTestCoefficient = 1

#options("download.file.method"="wget")

library(HelpersMG)
library(BatchGetSymbols)
library(future)

#rbindlist
library(data.table)

library(quantmod)
#library(anytime)
#library(RCurl)

#mclapply
library(parallel)

#group_split
library(dplyr)

#interpolate_ts
library(imputeTS)

#if(download)
{

}

#9 quarters is 5479/8897 61% (60%)
nasdaqTraded <- as.character(head(read.csv("nasdaqtraded.txt",sep="|")$Symbol,-2))
mfunds <- as.character(head(read.csv("nasdaqtraded.txt",sep="|")$Symbol,-2))
#loads sp500_symbols
#source("sp500.R")

#wget("ftp://ftp.nasdaqtrader.com/SymbolDirectory/bondslist.txt")
#bonds <- head(read.csv("bondslist.txt",sep="|")$Symbol,-2)

#begin function definitions
source("functions.R")
#end function definitions

#how to create objects of these and create functions for them?
marketNames <- c("Nasdaq","Mutual")

fil_Nasdaq <- c()
fil_Nasdaq <- tempfile()
#mfunds
fil_Mfunds <- c()
fil_Mfunds <- tempfile()

future::plan(future::multisession, workers = 4)

etf_and_crypto <- batch_get_symbols_size(etf_and_Crypto_list,length(etf_and_Crypto_list)/betaTestCoefficient,first.date,last.date)
#names(etf_and_crypto_DF) <- etf_and_Crypto_list

etf_and_crypto_DF <- rbindlist(etf_and_crypto)
#View(etf_and_crypto)

#risk_store_filtered <- risk_store[[1]][risk_store[[1]] <=first.date,]

etf_and_crypto_DF$date <- as.Date(as.character(etf_and_crypto_DF$date))

fwrite(file="etf_and_crypto.csv",etf_and_crypto_DF)

indices <- batch_get_symbols(Indexes, FiveYearsBack, last.date)
fwrite(rbindlist(indices),"indices.csv")

#mclapply skips too many
FRED_store <- mclapply(FRED_Indicators, function(x)
  {
  tq_get(x,get = "economic.data", from=first.date, to=last.date)
  })

#View(FRED_store)

names(FRED_store) <- FRED_Indicators

#risk_store_filtered <- risk_store[[1]][risk_store[[1]] <=first.date,]

FRED_store_DF <- rbindlist(FRED_store)

#View(FRED_store_DF)

FRED_store_DF$date <- as.Date(as.character(risk_factors_DF$Date))

fwrite(file="FRED_factors.csv",FRED_store_DF)

#https://stackoverflow.com/questions/10776742/how-can-i-make-a-list-of-lists-in-r
#https://stackoverflow.com/questions/60766832/nested-r-function-with-lapply
list_nasdaq <- list(fil=fil_Nasdaq, data=nasdaqTraded, size=770)
list_mfunds <- list(fil=fil_Mfunds, data=mfunds, size=324)

#by NonIndex, I specifically mean those used for generating Beta's since they go back 5 Years & I only grab a subset of stock data.
#so don't include ETF's in this list, this is 1st pass (i.e. subset)
myNonIndexlists <- list(list_nasdaq, list_mfunds)

  #each subsequent process is parallel, no need to use mclapply here (unless using tq_get)
  #1st pass of nonIndexLists filters out those that didn't exist 9 quarters ago

if(download)
{
  mclapply(myNonIndexlists, FUN=function(x) put_symbols_into_file(fil=x$fil, data=x$data, size=x$size, first.date, last.date))
  
  
  #View(dget(myNonIndexlists[[1]][[1]],keep.source = TRUE))
  
  #https://stackoverflow.com/questions/20428742/select-first-element-of-nested-list
  
  files <- mclapply(myNonIndexlists, `[[`, 1)
  #using 3 sigma
  #nasdaq 61% success rate @8897
  #mfunds 76% success rate @250
  
  filNasdaq <- c()
  filNasdaq <- tempfile()
  filMfunds <- c()
  filMfunds <- tempfile()
  
  filList <- list(filNasdaq,filMfunds)
  numLists <- 1:length(filList)
  #Used with filterSymbolsList / join_file_symbols
  
  #filteredSymbols <- mclapply(files,filtered_symbols, etf_and_Crypto_list)
  filteredSymbols <- mclapply(files,filtered_symbols)
  
  #list(filList[[1]],filteredSymbols[[1]])
  #pair fil with symbol list
  filteredSymbolsList <- mclapply(numLists,join_file_symbols)
  
  #Calls BatchGetSymbols which is parallel, no need to use mclapply
  
  first.date <- Sys.Date() - 821
  last.date <- Sys.Date()
  
  #overwrites filNasdaq, filMfunds
  #I assume I get no errors on this pass
  #delta comparison of symbols going in and symbols properly extracted after?
  #may need to split function into two (1st pass and 2nd pass)
  mclapply(filteredSymbolsList, FUN=function(x) put_symbols_into_file(fil=x[[1]], data=x[[2]], size=220, first.date, last.date))
  
  #start/diverge for index's (we want more than 220)
  #sp500
  
  #filSP500 <- c()
  #filSP500 <- tempfile()
  
  #fil_Indexs <- list(filSP500)
  #/betaTestCoefficient hack to grab them all
  
  #need to keep track of NA's or I'll end up running this twice
  #put_symbols_into_file(fil=filSP500, data=sp500_symbols, size=length(sp500_symbols)/betaTestCoefficient)
  #put_symbols_into_file(fil=filSP500, data=sp500_symbols, size=length(sp500_symbols))
  #filtered_sp500 <- filtered_symbols(filSP500)
  #names(filtered_sp500) <- filtered_sp500
  
  #View(dget(filteredSymbolsList[[2]][[1]],keep.source = TRUE))
  
  #get's adjusted prices and stores them into a single list, which deviates from the dput separate fil method I was using earlier.
  #I need them separate for writing to file
  
  fil_Adjusted_Nasdaq <- c()
  fil_Adjusted_Nasdaq <- tempfile()
  fil_Adjusted_Mfunds <- c()
  fil_Adjusted_Mfunds <- tempfile()
  
  #index's
  #fil_Adjusted_sp500 <- c()
  #fil_Adjusted_sp500 <- tempfile()
  
  #nested list
  #https://stackoverflow.com/questions/16602173/building-nested-lists-in-r
  iter1 <- list(fil_n=filNasdaq,fil_Adjusted_Nasdaq)
  iter2 <- list(fil_m=filMfunds,fil_Adjusted_Mfunds)
  #iter3 <- list(fil_s=filSP500,fil_Adjusted_sp500)
  
  #Diverge: clean index's (just original source file of Index, why it's diffferent is becuase the initial pass of others is to grab 3 standard deviations up to find missing backdates, but I'm not doing that with index's)
  #Indexes = c(filSP500)
  #mclapply(Indexes,clean_indexes)
  
  #End Diverge from nonIndex's
  
  #All = c(list(iter1), list(iter2), list(iter3))
  All = c(list(iter1), list(iter2))
  
  #num_Adjusted_List <- 1:length(fil_Adjusted_List)
  
  #passes two files at a time, source and destination
  mclapply(All, FUN=function(x) put_adjusted_into_file(files=x))
  
  #get 1st market
  #nonAdjusted1 <- dget(All[[1]][[1]],keep.source = TRUE)
  #nonAdjusted2 <- dget(All[[2]][[1]],keep.source = TRUE)
  #View(nonAdjusted1)
  #View(nonAdjusted2)
  
  #adjusted1 <- dget(All[[1]][[2]],keep.source = TRUE)
  #adjusted2 <- dget(All[[2]][[2]],keep.source = TRUE)
  #View(adjusted1)
  #View(adjusted2)
  #unname(adjusted1)
  
  #View(do.call(rbind, unname(adjusted1[1])))
  #rbindlist(adjusted1[1], use.names=TRUE, fill=TRUE, idcol=TRUE)
  
  #names(stock_split_adjusted) = marketNames
  
  fil_Adjusted_wDates_Nasdaq <- c()
  fil_Adjusted_wDates_Nasdaq <- tempfile()
  fil_Adjusted_wDates_Mfunds <- c()
  fil_Adjusted_wDates_Mfunds <- tempfile()
  #fil_Adjusted_wDates_SP500 <- c()
  #fil_Adjusted_wDates_SP500 <- tempfile()
  
  iter1 <- list("fil_o"=filNasdaq,"fil_a"=fil_Adjusted_Nasdaq,"fil_d"=fil_Adjusted_wDates_Nasdaq)
  iter2 <- list("fil_o"=filMfunds,"fil_a"=fil_Adjusted_Mfunds,"fil_d"=fil_Adjusted_wDates_Mfunds)
  #iter3 <- list("fil_o"=filSP500,"fil_a"=fil_Adjusted_sp500,"fil_d"=fil_Adjusted_wDates_SP500)
  #All2 = c(list(iter1), list(iter2), list(iter3))
  All2 = c(list(iter1), list(iter2))
  
  #get Dates
  mclapply(All2, put_to_file_bind_dates)
  #wDates1 <- dget(All2[[1]][[3]],keep.source = TRUE)
  
  #x=marketNames[1]
  #CSV's
  iter1 <- list("file"=fil_Adjusted_wDates_Nasdaq,"csv"="200NasdaqSymbols2Years.csv")
  iter2 <- list("file"=fil_Adjusted_wDates_Mfunds,"csv"="200MFundsSymbols2Years.csv")
  #iter3 <- list("file"=fil_Adjusted_wDates_SP500,"csv"="500SPSymbols2Years.csv")
  #All3 = c(list(iter1), list(iter2), list(iter3))
  All3 = c(list(iter1), list(iter2))
  
  mclapply(All3, write_csvs)
}
